<div class="div-form">
    <EditForm EditContext="@_editContext" Context="CurrentEditContext"
              OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <FluentValidator></FluentValidator>
        <MudTabs>
            <MudTabPanel Text="General">

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => resolution.Content.Title)">
                    <MudTextField @bind-Value="@resolution.Content.Title" Class="text-field-style"
                                  Label="Titulo de la resolución" @oninput='@(e => KeyUp(e,"Title",resolution.Content))'></MudTextField>
                    <div class="incorrecto">
                        <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                        <ValidationMessage For="@(() => resolution.Content.Title)" />
                    </div>
                    <div class="correcto">
                        <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => resolution.Content.Description)">
                    <MudTextField @bind-Value="@resolution.Content.Description" Class="text-field-style"
                                  Label="Descripcion" @oninput='@(e => KeyUp(e,"Description",resolution.Content))'></MudTextField>
                    <div class="incorrecto">
                        <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                        <ValidationMessage For="@(() => resolution.Content.Description)" />
                    </div>
                    <div class="correcto">
                        <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass( () => resolution.Content.Penalty)">
                    <MudTextField @bind-Value="@resolution.Content.Penalty" Class="text-field-style"
                                  Label="Sancion" @oninput='@(e => KeyUp(e,"Penalty",resolution.Content))'></MudTextField>
                    <div class="incorrecto">
                        <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                        <ValidationMessage For="@(() => resolution.Content.Penalty)" />
                    </div>
                    <div class="correcto">
                        <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => resolution.Content.AudienceStartDate)">

                    <MudDatePicker Label="Fecha de Inicio" @bind-Value="@resolution.Content.AudienceStartDate"></MudDatePicker>
                    <div class="incorrecto">
                        <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                        <ValidationMessage For="@(() => resolution.Content.AudienceStartDate)" />
                    </div>
                    <div class="correcto">
                        <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>
                <div class="field-container input-group-2 @CurrentEditContext.FieldCssClass(() => resolution.Content.AudienceEndDate)">

                    <MudDatePicker AllowInput="false" Label="Fecha de Fin" @bind-Value="@resolution.Content.AudienceEndDate"></MudDatePicker>
                    <div class="incorrecto">
                        <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                        <ValidationMessage For="@(() => resolution.Content.AudienceEndDate)" />
                    </div>
                    <div class="correcto">
                        <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                        <span class="good-msg">Correcto</span>
                    </div>
                </div>

                <InputFileV2 datosFile="@resolution.Content.Data" archivoSeleccionado="ImagenSeleccionada"></InputFileV2>

            </MudTabPanel>

            <MudTabPanel Text="Participantes">

                <div class="contenedor-Participants">
                    <div class="Title-paticipantes">
                        <div><span class="Title">Participantes de la resolucion</span></div>
                        <div class="icono" @onclick="@(addParticipant)">
                            <MudIcon Icon="add_circle_outline"></MudIcon>
                        </div>
                    </div>
                    @for (int i = 0; i < resolution.Content.Participants.Count; i++)
                    {
                        int index = i;
                        <div class="single-textfield-container">
                            <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => resolution.Content.Participants[index].Name)">
                                <MudTextField @bind-Value="@resolution.Content.Participants[index].Name" Class="text-field-style"
                                              Label="Ingrese una observación"
                                              @oninput='@(e => KeyUp(e, "Name", resolution.Content.Participants[index]))'></MudTextField>
                                <div class="incorrecto">
                                    <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                                    <ValidationMessage For="@(() => resolution.Content.Participants[index].Name)" />
                                </div>
                                <div class="correcto">
                                    <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                                    <span class="good-msg">Correcto</span>
                                </div>
                            </div>
                            <div class="base-icon" @onclick="@(() => removeParticipant(index))">
                                <MudIcon Icon="remove_circle_outline"></MudIcon>
                            </div>
                        </div>
                    }
                    <div class="field-container base-field input-group-2 @CurrentEditContext.FieldCssClass(() => resolution.Content.Participants)">
                        <div class="incorrecto">
                            <MudIcon Icon="@Icons.Filled.Error" Class="val-icon bad-icon"></MudIcon>
                            <ValidationMessage For="@(() => resolution.Content.Participants)" />
                        </div>
                        <div class="correcto">
                            <MudIcon Icon="@Icons.Filled.Check" Class="val-icon good-icon"></MudIcon>
                            <span class="good-msg">Correcto</span>
                        </div>
                    </div>
                </div>
                @*<div class="field-container">
                        <MatButton type="submit"
                                   Disabled="@loadprocess"
                                   Icon="@MatBlazor.Icons.Filled.Check_circle_outline"
                                   Class="button-input-style mat-success-c sub-but">Registrar Ahora</MatButton>
                    </div>*@
            </MudTabPanel>
            <MudTabPanel Text="Subir Anexo">
                <DragnDrop Label="" ImagenSeleccionada="SelectedImage2" FileNames="FileName"></DragnDrop>
                @if (names != null && names.Count > 0)
                {
                    @for (int i = 0; i < names.Count; i++)
                    {
                        int index = i;
                        string a = names[i];
                        <div>
                            @names[i]

                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(a,index))">
                                <small class="RedText">Eliminar</small>
                            </button>
                        </div>
                    }
                }
                <div class="field-container">
                    <MudButton ButtonType="@ButtonType.Submit"
                               Disabled="@loadprocess"
                               Icon="@Icons.Filled.CheckCircleOutline"
                               Class="button-input-style mat-success-c sub-but">Registrar Ahora</MudButton>
                </div>
            </MudTabPanel>
        </MudTabs>
    </EditForm>
</div>